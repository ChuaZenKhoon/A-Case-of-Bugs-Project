//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputAction/PlayerInputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputActions"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""0938390b-a01d-4b2b-b0a5-560412923246"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""c18e9bc9-a34b-403a-bdc7-27cdca4ddd59"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""CameraMovement"",
                    ""type"": ""PassThrough"",
                    ""id"": ""98765e00-2465-4791-a2fb-76bf6a59cfdc"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InventoryBarSelect"",
                    ""type"": ""Button"",
                    ""id"": ""1eba8473-78f9-4616-aa56-539d6aae9113"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Inventory"",
                    ""type"": ""Button"",
                    ""id"": ""47c6c7f9-ee39-4b02-afbd-aac371776145"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseScreen"",
                    ""type"": ""Button"",
                    ""id"": ""d6e7edcd-76aa-4698-af04-1b64ea4f660c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact"",
                    ""type"": ""Button"",
                    ""id"": ""cb5fcf52-34e5-4ec1-b698-e1365895e74b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Interact2"",
                    ""type"": ""Button"",
                    ""id"": ""fe8586e7-40f8-495f-92c6-ca0cf62951ae"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""7046dc2f-cc71-471e-b915-e04086bde955"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""6635f55c-f452-468d-b2a8-62d9cdb2880a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""ff38c7da-1650-4718-bc2e-20a26729cb71"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""39fda567-44f8-4334-bce6-a31b5f8950cc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""d9358d04-2b80-4018-8fdc-4c7853eac3c3"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ff94c792-b4c9-4820-8090-09c02f878d40"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InventoryBarSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb6c36bf-0739-44b9-8ad9-c5dbf789c57b"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InventoryBarSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c57f368c-b38d-4d10-ad83-031f8e92dd77"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InventoryBarSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""56b7ed00-f0c6-4556-91b5-5a50c30a44b2"",
                    ""path"": ""<Keyboard>/4"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InventoryBarSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""789cfb32-5d50-4fba-96e0-7960696b05bf"",
                    ""path"": ""<Keyboard>/5"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InventoryBarSelect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6fb09f6e-84cd-4ead-bb35-9ee17f4739f5"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Inventory"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""da41564c-e035-406e-88fd-5011c30f916c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5547ef22-1f86-4430-860f-c15f1a9df492"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a6a9e3c8-d598-456e-8178-89727bf36345"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interact2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a5b5dcb-245c-4308-87cb-05650d1c9c6e"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseScreen"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Equipment"",
            ""id"": ""46a2dc38-e938-4d31-8ed9-5d34e1111415"",
            ""actions"": [
                {
                    ""name"": ""TakePicture"",
                    ""type"": ""Button"",
                    ""id"": ""ac8e964b-da0a-41cb-9a42-103a6f7a16b5"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ClearSketch"",
                    ""type"": ""Button"",
                    ""id"": ""d0dbd94b-e7d1-43e8-b73c-eb5d4b17d87a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MouseSketchPosition"",
                    ""type"": ""Value"",
                    ""id"": ""7d87e390-1bdd-4a1c-ada9-af1ae41f4290"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ToggleSketchView"",
                    ""type"": ""Button"",
                    ""id"": ""2fb65cc7-6912-43e9-aeb6-32a807a8c05c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ba91f910-447e-4c54-80e3-cbe8e1ff4178"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""TakePicture"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9054cf5-40cc-417d-9e45-b27abebeb89a"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ClearSketch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c546b86-e93a-4838-bcbd-21cfc4beee90"",
                    ""path"": ""<Pointer>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MouseSketchPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fb3464ff-df53-4810-a51f-c5a49ca16d84"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ToggleSketchView"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Move = m_Player.FindAction("Move", throwIfNotFound: true);
        m_Player_CameraMovement = m_Player.FindAction("CameraMovement", throwIfNotFound: true);
        m_Player_InventoryBarSelect = m_Player.FindAction("InventoryBarSelect", throwIfNotFound: true);
        m_Player_Inventory = m_Player.FindAction("Inventory", throwIfNotFound: true);
        m_Player_PauseScreen = m_Player.FindAction("PauseScreen", throwIfNotFound: true);
        m_Player_Interact = m_Player.FindAction("Interact", throwIfNotFound: true);
        m_Player_Interact2 = m_Player.FindAction("Interact2", throwIfNotFound: true);
        // Equipment
        m_Equipment = asset.FindActionMap("Equipment", throwIfNotFound: true);
        m_Equipment_TakePicture = m_Equipment.FindAction("TakePicture", throwIfNotFound: true);
        m_Equipment_ClearSketch = m_Equipment.FindAction("ClearSketch", throwIfNotFound: true);
        m_Equipment_MouseSketchPosition = m_Equipment.FindAction("MouseSketchPosition", throwIfNotFound: true);
        m_Equipment_ToggleSketchView = m_Equipment.FindAction("ToggleSketchView", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Move;
    private readonly InputAction m_Player_CameraMovement;
    private readonly InputAction m_Player_InventoryBarSelect;
    private readonly InputAction m_Player_Inventory;
    private readonly InputAction m_Player_PauseScreen;
    private readonly InputAction m_Player_Interact;
    private readonly InputAction m_Player_Interact2;
    public struct PlayerActions
    {
        private @PlayerInputActions m_Wrapper;
        public PlayerActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Player_Move;
        public InputAction @CameraMovement => m_Wrapper.m_Player_CameraMovement;
        public InputAction @InventoryBarSelect => m_Wrapper.m_Player_InventoryBarSelect;
        public InputAction @Inventory => m_Wrapper.m_Player_Inventory;
        public InputAction @PauseScreen => m_Wrapper.m_Player_PauseScreen;
        public InputAction @Interact => m_Wrapper.m_Player_Interact;
        public InputAction @Interact2 => m_Wrapper.m_Player_Interact2;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @CameraMovement.started += instance.OnCameraMovement;
            @CameraMovement.performed += instance.OnCameraMovement;
            @CameraMovement.canceled += instance.OnCameraMovement;
            @InventoryBarSelect.started += instance.OnInventoryBarSelect;
            @InventoryBarSelect.performed += instance.OnInventoryBarSelect;
            @InventoryBarSelect.canceled += instance.OnInventoryBarSelect;
            @Inventory.started += instance.OnInventory;
            @Inventory.performed += instance.OnInventory;
            @Inventory.canceled += instance.OnInventory;
            @PauseScreen.started += instance.OnPauseScreen;
            @PauseScreen.performed += instance.OnPauseScreen;
            @PauseScreen.canceled += instance.OnPauseScreen;
            @Interact.started += instance.OnInteract;
            @Interact.performed += instance.OnInteract;
            @Interact.canceled += instance.OnInteract;
            @Interact2.started += instance.OnInteract2;
            @Interact2.performed += instance.OnInteract2;
            @Interact2.canceled += instance.OnInteract2;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @CameraMovement.started -= instance.OnCameraMovement;
            @CameraMovement.performed -= instance.OnCameraMovement;
            @CameraMovement.canceled -= instance.OnCameraMovement;
            @InventoryBarSelect.started -= instance.OnInventoryBarSelect;
            @InventoryBarSelect.performed -= instance.OnInventoryBarSelect;
            @InventoryBarSelect.canceled -= instance.OnInventoryBarSelect;
            @Inventory.started -= instance.OnInventory;
            @Inventory.performed -= instance.OnInventory;
            @Inventory.canceled -= instance.OnInventory;
            @PauseScreen.started -= instance.OnPauseScreen;
            @PauseScreen.performed -= instance.OnPauseScreen;
            @PauseScreen.canceled -= instance.OnPauseScreen;
            @Interact.started -= instance.OnInteract;
            @Interact.performed -= instance.OnInteract;
            @Interact.canceled -= instance.OnInteract;
            @Interact2.started -= instance.OnInteract2;
            @Interact2.performed -= instance.OnInteract2;
            @Interact2.canceled -= instance.OnInteract2;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // Equipment
    private readonly InputActionMap m_Equipment;
    private List<IEquipmentActions> m_EquipmentActionsCallbackInterfaces = new List<IEquipmentActions>();
    private readonly InputAction m_Equipment_TakePicture;
    private readonly InputAction m_Equipment_ClearSketch;
    private readonly InputAction m_Equipment_MouseSketchPosition;
    private readonly InputAction m_Equipment_ToggleSketchView;
    public struct EquipmentActions
    {
        private @PlayerInputActions m_Wrapper;
        public EquipmentActions(@PlayerInputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @TakePicture => m_Wrapper.m_Equipment_TakePicture;
        public InputAction @ClearSketch => m_Wrapper.m_Equipment_ClearSketch;
        public InputAction @MouseSketchPosition => m_Wrapper.m_Equipment_MouseSketchPosition;
        public InputAction @ToggleSketchView => m_Wrapper.m_Equipment_ToggleSketchView;
        public InputActionMap Get() { return m_Wrapper.m_Equipment; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(EquipmentActions set) { return set.Get(); }
        public void AddCallbacks(IEquipmentActions instance)
        {
            if (instance == null || m_Wrapper.m_EquipmentActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_EquipmentActionsCallbackInterfaces.Add(instance);
            @TakePicture.started += instance.OnTakePicture;
            @TakePicture.performed += instance.OnTakePicture;
            @TakePicture.canceled += instance.OnTakePicture;
            @ClearSketch.started += instance.OnClearSketch;
            @ClearSketch.performed += instance.OnClearSketch;
            @ClearSketch.canceled += instance.OnClearSketch;
            @MouseSketchPosition.started += instance.OnMouseSketchPosition;
            @MouseSketchPosition.performed += instance.OnMouseSketchPosition;
            @MouseSketchPosition.canceled += instance.OnMouseSketchPosition;
            @ToggleSketchView.started += instance.OnToggleSketchView;
            @ToggleSketchView.performed += instance.OnToggleSketchView;
            @ToggleSketchView.canceled += instance.OnToggleSketchView;
        }

        private void UnregisterCallbacks(IEquipmentActions instance)
        {
            @TakePicture.started -= instance.OnTakePicture;
            @TakePicture.performed -= instance.OnTakePicture;
            @TakePicture.canceled -= instance.OnTakePicture;
            @ClearSketch.started -= instance.OnClearSketch;
            @ClearSketch.performed -= instance.OnClearSketch;
            @ClearSketch.canceled -= instance.OnClearSketch;
            @MouseSketchPosition.started -= instance.OnMouseSketchPosition;
            @MouseSketchPosition.performed -= instance.OnMouseSketchPosition;
            @MouseSketchPosition.canceled -= instance.OnMouseSketchPosition;
            @ToggleSketchView.started -= instance.OnToggleSketchView;
            @ToggleSketchView.performed -= instance.OnToggleSketchView;
            @ToggleSketchView.canceled -= instance.OnToggleSketchView;
        }

        public void RemoveCallbacks(IEquipmentActions instance)
        {
            if (m_Wrapper.m_EquipmentActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IEquipmentActions instance)
        {
            foreach (var item in m_Wrapper.m_EquipmentActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_EquipmentActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public EquipmentActions @Equipment => new EquipmentActions(this);
    public interface IPlayerActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnCameraMovement(InputAction.CallbackContext context);
        void OnInventoryBarSelect(InputAction.CallbackContext context);
        void OnInventory(InputAction.CallbackContext context);
        void OnPauseScreen(InputAction.CallbackContext context);
        void OnInteract(InputAction.CallbackContext context);
        void OnInteract2(InputAction.CallbackContext context);
    }
    public interface IEquipmentActions
    {
        void OnTakePicture(InputAction.CallbackContext context);
        void OnClearSketch(InputAction.CallbackContext context);
        void OnMouseSketchPosition(InputAction.CallbackContext context);
        void OnToggleSketchView(InputAction.CallbackContext context);
    }
}
